plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        //TODO:注意这一行代码，目的是指定library的混淆文件，这样做的目的是，无需在app中添加混淆了,这个library中的混淆都添加在这个文件中即可
        //TODO:指定子模块的混淆文件
        consumerProguardFiles 'proguard-rules.pro'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
            } else {
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false

        }
        release {
            //开启混淆
            minifyEnabled true
            //压缩优化
            zipAlignEnabled true
            //默认的混淆文件以及我们指定的混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    //统一资源前缀，规范资源引用
    resourcePrefix "net_"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //组件依赖基础库
    implementation project(':base-common')
    //组件中依赖阿里路由编译框架
    kapt rootProject.ext.dependencies["arouter-compiler"]

}